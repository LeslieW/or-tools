# Please edit the following:
GFLAGS_DIR=..\\gflags-1.4
ZLIB_DIR=..\\zlib-1.2.5
ZLIB_NAME=zlib.lib
SWIG_BINARY=..\\swigwin-2.0.0\\swig.exe
PROTOBUF_DIR=..\\protobuf-2.3.0
# This is the root directory of the CLP installation. Please undefine if CLP is
# not installed. If you have installed CBC, CLP_DIR can have the same value as
# CBC_DIR.
#CLP_DIR=..\\cbc-2.6.2
# This is the root directory of the CBC installation. Please undefine if CBC is
# not installed.
#CBC_DIR=..\\cbc-2.6.2
# This is the root directory of glpk installation. Please undefine if GLPK is
# not installed.
#GLPK_VER=4_45
#GLPK_DIR=..\\glpk-4.45


# This describes the python installation.
PYTHON_INC=/Ic:\\Python27\\include
PYTHON_LNK=c:\\Python27\\libs\\python27.lib

#  ----- No more editing below -----

DEBUG=/O2 -DNDEBUG
CCC=cl /EHsc /MD

GFLAGS_INC = /I$(GFLAGS_DIR)\\src\\windows /I$(GFLAGS_DIR)\\src
ZLIB_INC = /I$(ZLIB_DIR)
PROTOBUF_INC = /I$(PROTOBUF_DIR)\\include

# Define CLP_DIR if unset and if CBC_DIR is set.
!ifdef CBC_DIR
!ifndef CLP_DIR
CLP_DIR=$(CBC_DIR)
!endif
!endif
# This is needed to find Coin LP include files and libraries.
!ifdef CLP_DIR
CLP_INC = /I$(CLP_DIR)\\include /DUSE_CLP
CLP_SWIG = -DUSE_CLP
CLP_LNK = $(CLP_DIR)\\lib\\coin\libClp.lib  $(CLP_DIR)\\lib\\coin\libCoinUtils.lib
!endif
# This is needed to find Coin Branch and Cut include files and libraries.
!ifdef CBC_DIR
CBC_INC = /I$(CBC_DIR)\\include /DUSE_CBC
CBC_SWIG = -DUSE_CBC
CBC_LNK = $(CBC_DIR)\\lib\\coin\\libCbcSolver.lib $(CBC_DIR)\\lib\\coin\\libCbc.lib $(CBC_DIR)\\lib\\coin\\libCgl.lib $(CBC_DIR)\\lib\\coin\\libOsi.lib $(CBC_DIR)\\lib\\coin\\libOsiCbc.lib $(CBC_DIR)\\lib\\coin\\libOsiClp.lib
!endif
# This is needed to find GLPK include files and libraries.
!ifdef GLPK_DIR
GLPK_INC = /I$(GLPK_DIR)\\include /DUSE_GLPK
GLPK_SWIG = -DUSE_GLPK
GLPK_LNK = $(GLPK_DIR)\\lib\\glpk_$(GLPK_VER).lib
!endif

CFLAGS= -nologo $(SYSCFLAGS) $(DEBUG) /I.  $(GFLAGS_INC) $(ZLIB_INC)\
	 $(PROTOBUF_INC) $(CBC_INC) $(CLP_INC) $(GLPK_INC)

LD = cl /EHsc
GFLAGS_LNK = $(GFLAGS_DIR)\\vsprojects\\libgflags\\Release\\libgflags.lib
ZLIB_LNK = $(ZLIB_DIR)/$(ZLIB_NAME)
PROTOBUF_LNK = $(PROTOBUF_DIR)\\lib\\libprotobuf.lib
LDFLAGS=$(GFLAGS_LNK) $(ZLIB_LNK) $(PROTOBUF_LNK) psapi.lib ws2_32.lib
LDLPDEPS=$(CBC_LNK) $(CLP_LNK) $(GLPK_LNK)


# Real targets

all:
	@echo Please define target:
	@echo "  - constraint programming: cplibs, cpexe, pycp"
	@echo "  - mathematical programming: lplibs, lpexe, pylp"
	@echo "  - algorithms: algoritmlibs, pyalgorithms"
	@echo "  - graph: graphlibs, pygraph"
	@echo "  - misc: clean"

CPLIBS = \
	routing.lib \
	constraint_solver.lib

BASE_LIBS = \
	util.lib \
	base.lib

GRAPH_LIBS = \
	graph.lib \
	shortestpaths.lib

graphlibs: $(GRAPH_LIBS) $(BASE_LIBS)

cplibs: $(CPLIBS) $(BASE_LIBS)

LPLIBS = \
	linear_solver.lib

lplibs: $(LPLIBS) $(BASE_LIBS)

CPBINARIES= \
          costas_array.exe \
          cryptarithm.exe \
          cvrptw.exe \
          flow_example.exe \
          golomb.exe \
          magic_square.exe \
          network_routing.exe \
          nqueens.exe \
          tsp.exe

cpexe: $(CPBINARIES)

LPBINARIES = \
	integer_solver_example.exe \
	linear_solver_example.exe

lpexe: $(LPBINARIES)

ALGORITHM_LIBS= \
	algorithms.lib

algorithm_libs: $(ALGORITHM_LIBS)

clean:
	del *.lib
	del objs\\*.obj
	del  $(CPBINARIES)
	del  $(LPBINARIES)
	del *.dll
	del *.exp
	del constraint_solver\constraint_solver_wrap.cc
	del constraint_solver\_pywrapcp.pyd
	del constraint_solver\pywrapcp.py
	del linear_solver\linear_solver_wrap.cc
	del linear_solver\_pywraplp.pyd
	del linear_solver\pywraplp.py
	del algorithms\knapsack_solver_wrap.cc
	del algorithms\_pywrapknapsack_solver.pyd
	del algorithms\pywrapknapsack_solver.py
	del constraint_solver\assignment.pb.*

# Constraint Solver Lib.

CONSTRAINT_SOLVER_LIB_OBJS = \
	objs/alldiff_cst.obj\
	objs/assignment.obj\
	objs/assignment.pb.obj\
	objs/constraint_solver.obj\
	objs/constraints.obj\
	objs/count_cst.obj\
	objs/default_search.obj\
	objs/demon_profiler.obj\
	objs/demon_profiler.pb.obj\
	objs/element.obj\
	objs/expr_array.obj\
	objs/expr_cst.obj\
	objs/expressions.obj\
	objs/interval.obj\
	objs/local_search.obj\
	objs/pack.obj\
	objs/range_cst.obj\
	objs/resource.obj\
	objs/sched_search.obj\
	objs/search.obj\
	objs/table.obj\
	objs/timetabling.obj\
	objs/tree_monitor.obj\
	objs/utilities.obj

objs/alldiff_cst.obj:constraint_solver/alldiff_cst.cc
	$(CCC) $(CFLAGS) -c constraint_solver/alldiff_cst.cc /Foobjs/alldiff_cst.obj

objs/assignment.obj:constraint_solver/assignment.cc constraint_solver/assignment.pb.h
	$(CCC) $(CFLAGS) -c constraint_solver/assignment.cc /Foobjs/assignment.obj

constraint_solver/assignment.pb.cc:constraint_solver/assignment.proto
	$(PROTOBUF_DIR)\\bin\\protoc --proto_path=constraint_solver --cpp_out=constraint_solver constraint_solver\\assignment.proto

objs/assignment.pb.obj:constraint_solver/assignment.pb.cc
	$(CCC) $(CFLAGS) -c constraint_solver/assignment.pb.cc /Foobjs/assignment.pb.obj

constraint_solver/assignment.pb.h:constraint_solver/assignment.pb.cc

objs/constraint_solver.obj:constraint_solver/constraint_solver.cc
	$(CCC) $(CFLAGS) -c constraint_solver/constraint_solver.cc /Foobjs/constraint_solver.obj

objs/constraints.obj:constraint_solver/constraints.cc
	$(CCC) $(CFLAGS) -c constraint_solver/constraints.cc /Foobjs/constraints.obj

objs/count_cst.obj:constraint_solver/count_cst.cc
	$(CCC) $(CFLAGS) -c constraint_solver/count_cst.cc /Foobjs/count_cst.obj

objs/default_search.obj:constraint_solver/default_search.cc
	$(CCC) $(CFLAGS) -c constraint_solver/default_search.cc /Foobjs/default_search.obj

objs/demon_profiler.obj:constraint_solver/demon_profiler.cc constraint_solver/demon_profiler.pb.h
	$(CCC) $(CFLAGS) -c constraint_solver/demon_profiler.cc /Foobjs/demon_profiler.obj

constraint_solver/demon_profiler.pb.cc:constraint_solver/demon_profiler.proto
	$(PROTOBUF_DIR)\\bin\\protoc --proto_path=constraint_solver --cpp_out=constraint_solver constraint_solver\\demon_profiler.proto

objs/demon_profiler.pb.obj:constraint_solver/demon_profiler.pb.cc
	$(CCC) $(CFLAGS) -c constraint_solver/demon_profiler.pb.cc /Foobjs/demon_profiler.pb.obj

constraint_solver/demon_profiler.pb.h:constraint_solver/demon_profiler.pb.cc

objs/element.obj:constraint_solver/element.cc
	$(CCC) $(CFLAGS) -c constraint_solver/element.cc /Foobjs/element.obj

objs/expr_array.obj:constraint_solver/expr_array.cc
	$(CCC) $(CFLAGS) -c constraint_solver/expr_array.cc /Foobjs/expr_array.obj

objs/expr_cst.obj:constraint_solver/expr_cst.cc
	$(CCC) $(CFLAGS) -c constraint_solver/expr_cst.cc /Foobjs/expr_cst.obj

objs/expressions.obj:constraint_solver/expressions.cc
	$(CCC) $(CFLAGS) -c constraint_solver/expressions.cc /Foobjs/expressions.obj

objs/interval.obj:constraint_solver/interval.cc
	$(CCC) $(CFLAGS) -c constraint_solver/interval.cc /Foobjs/interval.obj

objs/local_search.obj:constraint_solver/local_search.cc
	$(CCC) $(CFLAGS) -c constraint_solver/local_search.cc /Foobjs/local_search.obj

objs/pack.obj:constraint_solver/pack.cc
	$(CCC) $(CFLAGS) -c constraint_solver/pack.cc /Foobjs/pack.obj

objs/range_cst.obj:constraint_solver/range_cst.cc
	$(CCC) $(CFLAGS) -c constraint_solver/range_cst.cc /Foobjs/range_cst.obj

objs/resource.obj:constraint_solver/resource.cc
	$(CCC) $(CFLAGS) -c constraint_solver/resource.cc /Foobjs/resource.obj

objs/sched_search.obj:constraint_solver/sched_search.cc
	$(CCC) $(CFLAGS) -c constraint_solver/sched_search.cc /Foobjs/sched_search.obj

objs/search.obj:constraint_solver/search.cc
	$(CCC) $(CFLAGS) -c constraint_solver/search.cc /Foobjs/search.obj

objs/table.obj:constraint_solver/table.cc
	$(CCC) $(CFLAGS) -c constraint_solver/table.cc /Foobjs/table.obj

objs/timetabling.obj:constraint_solver/timetabling.cc
	$(CCC) $(CFLAGS) -c constraint_solver/timetabling.cc /Foobjs/timetabling.obj

objs/tree_monitor.obj:constraint_solver/tree_monitor.cc
	$(CCC) $(CFLAGS) -c constraint_solver/tree_monitor.cc /Foobjs/tree_monitor.obj

objs/utilities.obj:constraint_solver/utilities.cc
	$(CCC) $(CFLAGS) -c constraint_solver/utilities.cc /Foobjs/utilities.obj

constraint_solver.lib: $(CONSTRAINT_SOLVER_LIB_OBJS)
	lib /OUT:constraint_solver.lib $(CONSTRAINT_SOLVER_LIB_OBJS)

# Linear Solver Library

LINEAR_SOLVER_LIB_OBJS = \
	objs/cbc_interface.obj \
	objs/clp_interface.obj \
	objs/glpk_interface.obj \
	objs/linear_solver.obj \
	objs/linear_solver.pb.obj

objs/cbc_interface.obj:linear_solver/cbc_interface.cc linear_solver/linear_solver.pb.h
	$(CCC) $(CFLAGS) -c linear_solver\\cbc_interface.cc /Foobjs\\cbc_interface.obj

objs/clp_interface.obj:linear_solver/clp_interface.cc linear_solver/linear_solver.pb.h
	$(CCC) $(CFLAGS) -c linear_solver\\clp_interface.cc /Foobjs/clp_interface.obj

objs/glpk_interface.obj:linear_solver/glpk_interface.cc linear_solver/linear_solver.pb.h
	$(CCC) $(CFLAGS) -c linear_solver\\glpk_interface.cc /Foobjs\\glpk_interface.obj

objs/linear_solver.obj:linear_solver/linear_solver.cc linear_solver/linear_solver.pb.h
	$(CCC) $(CFLAGS) -c linear_solver\\linear_solver.cc /Foobjs\\linear_solver.obj

objs/linear_solver.pb.obj:linear_solver/linear_solver.pb.cc
	$(CCC) $(CFLAGS) -c linear_solver\\linear_solver.pb.cc /Foobjs\\linear_solver.pb.obj

linear_solver/linear_solver.pb.cc:linear_solver/linear_solver.proto
	$(PROTOBUF_DIR)\\bin\\protoc --proto_path=linear_solver --cpp_out=linear_solver linear_solver\\linear_solver.proto

linear_solver/linear_solver.pb.h:linear_solver/linear_solver.pb.cc

linear_solver.lib: $(LINEAR_SOLVER_LIB_OBJS)
	lib /OUT:linear_solver.lib $(LINEAR_SOLVER_LIB_OBJS)

# GFlags copy library.

libgflags.dll: $(GFLAGS_DIR)\vsprojects\libgflags\Release\libgflags.dll
	       copy $(GFLAGS_DIR)\vsprojects\libgflags\Release\libgflags.dll .

# Util library.

UTIL_LIB_OBJS=\
	objs/bitset.obj \
	objs/cached_log.obj \
	objs/xml_helper.obj

objs/bitset.obj:util/bitset.cc
	$(CCC) $(CFLAGS) -c util/bitset.cc /Foobjs/bitset.obj
objs/cached_log.obj:util/cached_log.cc
	$(CCC) $(CFLAGS) -c util/cached_log.cc /Foobjs/cached_log.obj
objs/xml_helper.obj:util/xml_helper.cc
	$(CCC) $(CFLAGS) -c util/xml_helper.cc /Foobjs/xml_helper.obj

util.lib: $(UTIL_LIB_OBJS)
	lib /OUT:util.lib $(UTIL_LIB_OBJS)

# Graph library.

GRAPH_LIB_OBJS=\
	objs/bron_kerbosch.obj \
	objs/max_flow.obj \
	objs/min_cost_flow.obj

objs/bron_kerbosch.obj:graph/bron_kerbosch.cc
	$(CCC) $(CFLAGS) -c graph/bron_kerbosch.cc /Foobjs/bron_kerbosch.obj

objs/max_flow.obj:graph/max_flow.cc
	$(CCC) $(CFLAGS) -c graph/max_flow.cc /Foobjs/max_flow.obj

objs/min_cost_flow.obj:graph/min_cost_flow.cc
	$(CCC) $(CFLAGS) -c graph/min_cost_flow.cc /Foobjs/min_cost_flow.obj

graph.lib: $(GRAPH_LIB_OBJS)
	lib /OUT:graph.lib $(GRAPH_LIB_OBJS)

# Shortestpaths library.

SHORTESTPATHS_LIB_OBJS=\
	objs/bellman_ford.obj \
	objs/dijkstra.obj \
	objs/shortestpaths.obj

objs/bellman_ford.obj:graph/bellman_ford.cc
	$(CCC) $(CFLAGS) -c graph/bellman_ford.cc /Foobjs/bellman_ford.obj

objs/dijkstra.obj:graph/dijkstra.cc
	$(CCC) $(CFLAGS) -c graph/dijkstra.cc /Foobjs/dijkstra.obj

objs/shortestpaths.obj:graph/shortestpaths.cc
	$(CCC) $(CFLAGS) -c graph/shortestpaths.cc /Foobjs/shortestpaths.obj

shortestpaths.lib: $(SHORTESTPATHS_LIB_OBJS)
	lib /OUT:shortestpaths.lib $(SHORTESTPATHS_LIB_OBJS)

# Routing library.

ROUTING_LIB_OBJS=\
	objs/routing.obj

objs/routing.obj:constraint_solver/routing.cc
	$(CCC) $(CFLAGS) -c constraint_solver/routing.cc /Foobjs/routing.obj

routing.lib: $(ROUTING_LIB_OBJS)
	lib /OUT:routing.lib $(ROUTING_LIB_OBJS)

# Algorithms library.

ALGORITHMS_LIB_OBJS=\
	objs/hungarian.obj \
	objs/knapsack_solver.obj

objs/hungarian.obj:algorithms/hungarian.cc
	$(CCC) $(CFLAGS) -c algorithms/hungarian.cc /Foobjs/hungarian.obj

objs/knapsack_solver.obj:algorithms/knapsack_solver.cc
	$(CCC) $(CFLAGS) -c algorithms/knapsack_solver.cc /Foobjs/knapsack_solver.obj

algorithms.lib: $(ALGORITHMS_LIB_OBJS)
	lib /OUT:algorithms.lib $(ALGORITHMS_LIB_OBJS)

# Base library.

BASE_LIB_OBJS=\
	objs/bitmap.obj\
	objs/callback.obj\
        objs/join.obj\
	objs/logging.obj\
	objs/random.obj\
	objs/stringpiece.obj\
	objs/stringprintf.obj\
        objs/sysinfo.obj\
	objs/timer.obj

objs/bitmap.obj:base/bitmap.cc
	$(CCC) $(CFLAGS) -c base/bitmap.cc /Foobjs/bitmap.obj
objs/callback.obj:base/callback.cc
	$(CCC) $(CFLAGS) -c base/callback.cc /Foobjs/callback.obj
objs/join.obj:base/join.cc
	$(CCC) $(CFLAGS) -c base/join.cc /Foobjs/join.obj
objs/logging.obj:base/logging.cc
	$(CCC) $(CFLAGS) -c base/logging.cc /Foobjs/logging.obj
objs/random.obj:base/random.cc
	$(CCC) $(CFLAGS) -c base/random.cc /Foobjs/random.obj
objs/stringpiece.obj:base/stringpiece.cc
	$(CCC) $(CFLAGS) -c base/stringpiece.cc /Foobjs/stringpiece.obj
objs/stringprintf.obj:base/stringprintf.cc
	$(CCC) $(CFLAGS) -c base/stringprintf.cc /Foobjs/stringprintf.obj
objs/sysinfo.obj:base/sysinfo.cc
	$(CCC) $(CFLAGS) -c base/sysinfo.cc /Foobjs/sysinfo.obj
objs/timer.obj:base/timer.cc
	$(CCC) $(CFLAGS) -c base/timer.cc /Foobjs/timer.obj

base.lib: $(BASE_LIB_OBJS)
	lib /OUT:base.lib $(BASE_LIB_OBJS)


# Pure CP Examples

objs/costas_array.obj: examples/costas_array.cc
	$(CCC) $(CFLAGS) -c examples/costas_array.cc /Foobjs/costas_array.obj

costas_array.exe: $(CPLIBS) $(BASE_LIBS) objs/costas_array.obj libgflags.dll
	$(CCC) $(CFLAGS) $(LDFLAGS) objs/costas_array.obj $(CPLIBS) $(BASE_LIBS) /Fecostas_array.exe

objs/cryptarithm.obj:examples/cryptarithm.cc
	$(CCC) $(CFLAGS) -c examples/cryptarithm.cc /Foobjs/cryptarithm.obj

cryptarithm.exe: $(CPLIBS) $(BASE_LIBS) objs/cryptarithm.obj libgflags.dll
	$(CCC) $(CFLAGS) $(LDFLAGS) objs/cryptarithm.obj $(CPLIBS) $(BASE_LIBS) /Fecryptarithm.exe

objs/cvrptw.obj: examples/cvrptw.cc
	$(CCC) $(CFLAGS) -c examples/cvrptw.cc /Foobjs/cvrptw.obj

cvrptw.exe: $(CPLIBS) $(BASE_LIBS) objs/cvrptw.obj libgflags.dll
	$(CCC) $(CFLAGS) $(LDFLAGS) objs/cvrptw.obj $(CPLIBS) $(BASE_LIBS) /Fecvrptw.exe

objs/flow_example.obj:examples/flow_example.cc
	$(CCC) $(CFLAGS) -c examples/flow_example.cc /Foobjs/flow_example.obj

flow_example.exe: $(GRAPH_LIBS) $(BASE_LIBS) objs/flow_example.obj libgflags.dll
	$(CCC) $(CFLAGS) $(LDFLAGS) objs/flow_example.obj $(GRAPH_LIBS) $(BASE_LIBS) /Feflow_example.exe

objs/golomb.obj:examples/golomb.cc
	$(CCC) $(CFLAGS) -c examples/golomb.cc /Foobjs/golomb.obj

golomb.exe: $(CPLIBS) $(BASE_LIBS) objs/golomb.obj libgflags.dll
	$(CCC) $(CFLAGS) $(LDFLAGS) objs/golomb.obj $(CPLIBS) $(BASE_LIBS) /Fegolomb.exe

objs/magic_square.obj:examples/magic_square.cc
	$(CCC) $(CFLAGS) -c examples/magic_square.cc /Foobjs/magic_square.obj

magic_square.exe: $(CPLIBS) $(BASE_LIBS) objs/magic_square.obj libgflags.dll
	$(CCC) $(CFLAGS) $(LDFLAGS) objs/magic_square.obj $(CPLIBS) $(BASE_LIBS) /Femagic_square.exe

objs/network_routing.obj:examples/network_routing.cc
	$(CCC) $(CFLAGS) -c examples/network_routing.cc /Foobjs/network_routing.obj

network_routing.exe: $(CPLIBS) $(BASE_LIBS) $(GRAPH_LIBS) objs/network_routing.obj libgflags.dll
	$(CCC) $(CFLAGS) $(LDFLAGS) objs/network_routing.obj $(CPLIBS) $(GRAPH_LIBS) $(BASE_LIBS) /Fenetwork_routing.exe

objs/nqueens.obj: examples/nqueens.cc
	$(CCC) $(CFLAGS) -c examples/nqueens.cc /Foobjs/nqueens.obj

nqueens.exe: $(CPLIBS) $(BASE_LIBS) objs/nqueens.obj libgflags.dll
	$(CCC) $(CFLAGS) $(LDFLAGS) objs/nqueens.obj $(CPLIBS) $(BASE_LIBS) /Fenqueens.exe

objs/tsp.obj: examples/tsp.cc
	$(CCC) $(CFLAGS) -c examples/tsp.cc /Foobjs/tsp.obj

tsp.exe: $(CPLIBS) $(BASE_LIBS) objs/tsp.obj libgflags.dll
	$(CCC) $(CFLAGS) $(LDFLAGS) objs/tsp.obj $(CPLIBS) $(BASE_LIBS) /Fetsp.exe

# Linear Programming Examples

objs/integer_solver_example.obj: examples/integer_solver_example.cc
	$(CCC) $(CFLAGS) -c examples/integer_solver_example.cc /Foobjs/integer_solver_example.obj

integer_solver_example.exe: $(LPLIBS) $(BASE_LIBS) objs/integer_solver_example.obj libgflags.dll
	$(CCC) $(CFLAGS) $(LDFLAGS) objs/integer_solver_example.obj $(LPLIBS) $(BASE_LIBS) $(LDLPDEPS) /Feinteger_solver_example.exe

objs/linear_solver_example.obj: examples/linear_solver_example.cc
	$(CCC) $(CFLAGS) -c examples/linear_solver_example.cc /Foobjs/linear_solver_example.obj

linear_solver_example.exe: $(LPLIBS) $(BASE_LIBS) objs/linear_solver_example.obj libgflags.dll
	$(CCC) $(CFLAGS) $(LDFLAGS) objs/linear_solver_example.obj $(LPLIBS) $(BASE_LIBS) $(LDLPDEPS) /Felinear_solver_example.exe

# SWIG

# pywrapknapsack_solver

pyalgorithms: algorithms/_pywrapknapsack_solver.pyd algorithms/pywrapknapsack_solver.py $(ALGORITHM_LIBS) $(BASE_LIBS)

algorithms/pywrapknapsack_solver.py: algorithms/knapsack_solver.swig algorithms/knapsack_solver.h base/base.swig
	$(SWIG_BINARY) -c++ -python -o algorithms/knapsack_solver_wrap.cc -module pywrapknapsack_solver algorithms/knapsack_solver.swig

algorithms/knapsack_solver_wrap.cc: algorithms/pywrapknapsack_solver.py

objs/knapsack_solver_wrap.obj: algorithms/knapsack_solver_wrap.cc
	$(CCC) $(CFLAGS) $(PYTHON_INC) /I__WIN32__ -c algorithms/knapsack_solver_wrap.cc /Foobjs/knapsack_solver_wrap.obj

_pywrapknapsack_solver.dll: objs/knapsack_solver_wrap.obj $(ALGORITHM_LIBS) $(BASE_LIBS)
	link /DLL /OUT:_pywrapknapsack_solver.dll objs/knapsack_solver_wrap.obj $(ALGORITHM_LIBS) $(BASE_LIBS) $(LDFLAGS) $(PYTHON_LNK)

algorithms/_pywrapknapsack_solver.pyd: _pywrapknapsack_solver.dll
	copy _pywrapknapsack_solver.dll algorithms\\_pywrapknapsack_solver.pyd

# pywrapflow

pygraph: graph/_pywrapflow.pyd graph/pywrapflow.py $(GRAPH_LIBS) $(BASE_LIBS)

graph/pywrapflow.py: graph/flow.swig graph/min_cost_flow.h graph/max_flow.h graph/ebert_graph.h base/base.swig
	$(SWIG_BINARY) -c++ -python -o graph/flow_wrap.cc -module pywrapflow graph/flow.swig

graph/flow_wrap.cc: graph/pywrapflow.py

objs/flow_wrap.obj: graph/flow_wrap.cc
	$(CCC) $(CFLAGS) $(PYTHON_INC) /I__WIN32__ -c graph/flow_wrap.cc /Foobjs/flow_wrap.obj

_pywrapflow.dll: objs/flow_wrap.obj $(GRAPH_LIBS) $(BASE_LIBS)
	link /DLL /OUT:_pywrapflow.dll objs/flow_wrap.obj $(GRAPH_LIBS) $(BASE_LIBS) $(LDFLAGS) $(PYTHON_LNK)

graph/_pywrapflow.pyd: _pywrapflow.dll
	copy _pywrapflow.dll graph\\_pywrapflow.pyd

# pywrapcp

pycp: constraint_solver/_pywrapcp.pyd constraint_solver/pywrapcp.py constraint_solver/_pywraprouting.pyd constraint_solver/pywraprouting.py $(CPLIBS) $(BASE_LIBS)

constraint_solver/pywrapcp.py: constraint_solver/constraint_solver.swig constraint_solver/constraint_solver.h constraint_solver/constraint_solveri.h base/base.swig
	$(SWIG_BINARY) -c++ -python -o constraint_solver/constraint_solver_wrap.cc -module pywrapcp constraint_solver/constraint_solver.swig

constraint_solver/constraint_solver_wrap.cc: constraint_solver/pywrapcp.py

objs/constraint_solver_wrap.obj: constraint_solver/constraint_solver_wrap.cc
	$(CCC) $(CFLAGS) $(PYTHON_INC) /I__WIN32__ -c constraint_solver/constraint_solver_wrap.cc /Foobjs/constraint_solver_wrap.obj

_pywrapcp.dll: objs/constraint_solver_wrap.obj $(CPLIBS) $(BASE_LIBS) libgflags.dll
	link /DLL /OUT:_pywrapcp.dll objs/constraint_solver_wrap.obj $(CPLIBS) $(BASE_LIBS) $(LDFLAGS) $(PYTHON_LNK)

constraint_solver/_pywrapcp.pyd: _pywrapcp.dll
	copy _pywrapcp.dll constraint_solver\\_pywrapcp.pyd

# pywraprouting

constraint_solver/pywraprouting.py: constraint_solver/routing.swig constraint_solver/constraint_solver.h constraint_solver/constraint_solveri.h constraint_solver/routing.h base/base.swig
	$(SWIG_BINARY) -c++ -python -o constraint_solver/routing_wrap.cc -module pywraprouting constraint_solver/routing.swig

constraint_solver/routing_wrap.cc: constraint_solver/pywraprouting.py

objs/routing_wrap.obj: constraint_solver/routing_wrap.cc
	$(CCC) $(CFLAGS) $(PYTHON_INC) /I__WIN32__ -c constraint_solver/routing_wrap.cc /Foobjs/routing_wrap.obj

_pywraprouting.dll: objs/routing_wrap.obj $(CPLIBS) $(BASE_LIBS) libgflags.dll
	link /DLL /OUT:_pywraprouting.dll objs/routing_wrap.obj $(CPLIBS) $(BASE_LIBS) $(LDFLAGS) $(PYTHON_LNK)

constraint_solver/_pywraprouting.pyd: _pywraprouting.dll
	copy _pywraprouting.dll constraint_solver\\_pywraprouting.pyd

# pywraplp

pylp: linear_solver/_pywraplp.pyd linear_solver/pywraplp.py $(LPLIBS) $(BASE_LIBS)

linear_solver/pywraplp.py: linear_solver/linear_solver.swig linear_solver/linear_solver.h base/base.swig
	$(SWIG_BINARY) $(CLP_SWIG) $(CBC_SWIG) $(GLPK_SWIG) -c++ -python -o linear_solver\\linear_solver_wrap.cc -module pywraplp linear_solver\\linear_solver.swig

linear_solver/linear_solver_wrap.cc: linear_solver/pywraplp.py

objs/linear_solver_wrap.obj: linear_solver/linear_solver_wrap.cc
	$(CCC) $(CFLAGS) $(PYTHON_INC) /I__WIN32__ -c linear_solver\\linear_solver_wrap.cc /Foobjs\\linear_solver_wrap.obj

_pywraplp.dll: objs/linear_solver_wrap.obj $(LPLIBS) $(BASE_LIBS) libgflags.dll
	link /DLL /OUT:_pywraplp.dll objs\\linear_solver_wrap.obj $(LPLIBS) $(BASE_LIBS) $(LDLPDEPS) $(LDFLAGS) $(PYTHON_LNK)

linear_solver/_pywraplp.pyd: _pywraplp.dll
	copy _pywraplp.dll linear_solver\\_pywraplp.pyd



