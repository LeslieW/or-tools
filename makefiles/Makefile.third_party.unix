# SVN tags of dependencies to checkout.

# version 2.0
GFLAGS_TAG = 76
# version 2.5.0 + fix
PROTOBUF_TAG = 512
# 0.4.0
GOOGLE_APPUTILS_TAG = 14
# 2.0.2
SPARSEHASH_TAG = 116
CBC_TAG = 2.8.7
# 2.0.11
SWIG_TAG = 17741
# version 8.33
PCRE_TAG = 1336
MONO_TAG = 3.2.5

# Build extra dependencies (GLPK, SCIP) from archive only if the
# archive is present.  The archive should be glpk-4.52.tar.gz
GLPK_TAG = 4.52
# The archive should be scipoptsuite-3.0.1.tgz
SCIP_TAG = 3.0.1

# Detect if scip archive is there.
ifeq ($(wildcard dependencies/archives/scipoptsuite-$(SCIP_TAG).tgz),)
    SCIP_TARGET =
    SCIP_MAKEFILE = # UNIX_SCIP_DIR support not included.
else
    SCIP_TARGET = dependencies/install/scipoptsuite-$(SCIP_TAG)/scip-$(SCIP_TAG)/bin/scip
    SCIP_MAKEFILE = UNIX_SCIP_DIR = $(OR_ROOT_FULL)/dependencies/install/scipoptsuite-$(SCIP_TAG)/scip-$(SCIP_TAG)
    ifeq ($(PLATFORM), LINUX)
	BUILD_SCIP = make ZIMPL=false READLINE=false USRCXXFLAGS=-fPIC CFLAGS=-fPIC
    endif
    ifeq ($(PLATFORM), MACOSX)
	BUILD_SCIP = make ZIMPL=false READLINE=false ARCH=x86_64
    endif
endif

# Detect if GLPK archive is there.
ifeq ($(wildcard dependencies/archives/glpk-$(GLPK_TAG).tar.gz),)
    GLPK_TARGET =
    GLPK_MAKEFILE = # GLPK support not included.
else
    GLPK_TARGET = dependencies/install/bin/glpsol
    GLPK_MAKEFILE = UNIX_GLPK_DIR = $(OR_ROOT_FULL)/dependencies/install
endif

# Detect if mono archive is there
ifeq ($(wildcard dependencies/archives/mono-$(MONO_TAG).tar.bz2),)
    MONO_TARGET =
    MONO_MAKEFILE = # MONO support not included.
else
    MONO_TARGET = dependencies/install/bin/gmcs
    MONO_MAKEFILE = UNIX_MONO_DIR = $(OR_ROOT_FULL)/dependencies/install
endif

# Main target.
.PHONY: third_party build_third_party makefile_third_party
third_party: install_third_party makefile_third_party

install_third_party: \
	install_gflags \
	install_protobuf \
	install_google_apputils \
	install_sparsehash \
	install_swig \
	install_cbc \
	install_glpk \
	install_scip \
	install_mono

# Install gflags.
install_gflags: dependencies/install/bin/gflags_completions.sh

dependencies/install/bin/gflags_completions.sh: dependencies/sources/gflags-$(GFLAGS_TAG)/Makefile
	cd dependencies/sources/gflags-$(GFLAGS_TAG) && make install

dependencies/sources/gflags-$(GFLAGS_TAG)/Makefile: dependencies/sources/gflags-$(GFLAGS_TAG)/configure
	cd dependencies/sources/gflags-$(GFLAGS_TAG) && ./configure --prefix=$(OR_ROOT_FULL)/dependencies/install --with-pic

dependencies/sources/gflags-$(GFLAGS_TAG)/configure: dependencies/sources/gflags-$(GFLAGS_TAG)/autogen.sh
	cd dependencies/sources/gflags-$(GFLAGS_TAG) && ./autogen.sh

dependencies/sources/gflags-$(GFLAGS_TAG)/autogen.sh:
	svn co http://gflags.googlecode.com/svn/trunk/ -r $(GFLAGS_TAG) dependencies/sources/gflags-$(GFLAGS_TAG)

# Install protocol buffers.
install_protobuf: dependencies/install/bin/protoc

dependencies/install/bin/protoc: dependencies/sources/protobuf-$(PROTOBUF_TAG)/Makefile
	cd dependencies/sources/protobuf-$(PROTOBUF_TAG) && make install

dependencies/sources/protobuf-$(PROTOBUF_TAG)/Makefile: dependencies/sources/protobuf-$(PROTOBUF_TAG)/configure
	cd dependencies/sources/protobuf-$(PROTOBUF_TAG) && ./configure --prefix=$(OR_ROOT_FULL)/dependencies/install --with-pic

dependencies/sources/protobuf-$(PROTOBUF_TAG)/configure: dependencies/sources/protobuf-$(PROTOBUF_TAG)/autogen.sh
	cd dependencies/sources/protobuf-$(PROTOBUF_TAG) && ./autogen.sh

dependencies/sources/protobuf-$(PROTOBUF_TAG)/autogen.sh:
	svn co http://protobuf.googlecode.com/svn/trunk/ -r $(PROTOBUF_TAG) dependencies/sources/protobuf-$(PROTOBUF_TAG)

# Intall Google Apputils Python.
install_google_apputils: dependencies/sources/google_apputils_python-$(GOOGLE_APPUTILS_TAG)/README

dependencies/sources/google_apputils_python-$(GOOGLE_APPUTILS_TAG)/README:
	svn co http://google-apputils-python.googlecode.com/svn/trunk/ -r $(GOOGLE_APPUTILS_TAG) dependencies/sources/google_apputils_python-$(GOOGLE_APPUTILS_TAG)

# Install sparsehash.
install_sparsehash: dependencies/install/include/google/dense_hash_map

dependencies/install/include/google/dense_hash_map: dependencies/sources/sparsehash-$(SPARSEHASH_TAG)/Makefile
	cd dependencies/sources/sparsehash-$(SPARSEHASH_TAG) && make install

dependencies/sources/sparsehash-$(SPARSEHASH_TAG)/Makefile: dependencies/sources/sparsehash-$(SPARSEHASH_TAG)/configure
	cd dependencies/sources/sparsehash-$(SPARSEHASH_TAG) && ./configure --prefix=$(OR_ROOT_FULL)/dependencies/install --with-pic

dependencies/sources/sparsehash-$(SPARSEHASH_TAG)/configure: dependencies/sources/sparsehash-$(SPARSEHASH_TAG)/autogen.sh
	cd dependencies/sources/sparsehash-$(SPARSEHASH_TAG) && ./autogen.sh

dependencies/sources/sparsehash-$(SPARSEHASH_TAG)/autogen.sh:
	svn co http://sparsehash.googlecode.com/svn/trunk/ -r $(SPARSEHASH_TAG) dependencies/sources/sparsehash-$(SPARSEHASH_TAG)

# Install Coin CBC.
install_cbc: dependencies/install/bin/cbc

dependencies/install/bin/cbc: dependencies/sources/cbc-$(CBC_TAG)/Makefile
	cd dependencies/sources/cbc-$(CBC_TAG) && make install

dependencies/sources/cbc-$(CBC_TAG)/Makefile: dependencies/sources/cbc-$(CBC_TAG)/Makefile.in
	cd dependencies/sources/cbc-$(CBC_TAG) && ./configure --prefix=$(OR_ROOT_FULL)/dependencies/install --disable-bzlib --without-lapack --enable-static --enable-shared --with-pic

dependencies/sources/cbc-$(CBC_TAG)/Makefile.in:
	svn co https://projects.coin-or.org/svn/Cbc/releases/$(CBC_TAG) dependencies/sources/cbc-$(CBC_TAG)

# Install pcre (dependency of SWIG).
dependencies/install/bin/pcretest: dependencies/sources/pcre-$(PCRE_TAG)/Makefile
	cd dependencies/sources/pcre-$(PCRE_TAG) && make && make install

dependencies/sources/pcre-$(PCRE_TAG)/Makefile: dependencies/sources/pcre-$(PCRE_TAG)/configure
	cd dependencies/sources/pcre-$(PCRE_TAG) && ./configure --disable-shared --prefix=$(OR_ROOT_FULL)/dependencies/install

dependencies/sources/pcre-$(PCRE_TAG)/configure: dependencies/sources/pcre-$(PCRE_TAG)/autogen.sh
	cd dependencies/sources/pcre-$(PCRE_TAG) && ./autogen.sh

dependencies/sources/pcre-$(PCRE_TAG)/autogen.sh:
	svn co svn://vcs.exim.org/pcre/code/trunk -r $(PCRE_TAG) dependencies/sources/pcre-$(PCRE_TAG)

# Install SWIG.
install_swig: dependencies/install/bin/swig

dependencies/install/bin/swig: dependencies/sources/swig-$(SWIG_TAG)/Makefile
	cd dependencies/sources/swig-$(SWIG_TAG) && make && make install

dependencies/sources/swig-$(SWIG_TAG)/Makefile: dependencies/sources/swig-$(SWIG_TAG)/configure dependencies/install/bin/pcretest
	cd dependencies/sources/swig-$(SWIG_TAG) && ./configure --prefix=$(OR_ROOT_FULL)/dependencies/install --with-pcre-prefix=$(OR_ROOT_FULL)/dependencies/install --disable-ccache --without-octave

dependencies/sources/swig-$(SWIG_TAG)/configure: dependencies/sources/swig-$(SWIG_TAG)/autogen.sh
	cd dependencies/sources/swig-$(SWIG_TAG) && ./autogen.sh

dependencies/sources/swig-$(SWIG_TAG)/autogen.sh:
	svn co https://github.com/swig/swig/trunk -r $(SWIG_TAG) dependencies/sources/swig-$(SWIG_TAG)

# Install glpk if needed.
install_glpk: $(GLPK_TARGET)

dependencies/install/bin/glpsol: dependencies/sources/glpk-$(GLPK_TAG)/Makefile
	cd dependencies/sources/glpk-$(GLPK_TAG) && make install

dependencies/sources/glpk-$(GLPK_TAG)/Makefile: dependencies/sources/glpk-$(GLPK_TAG)/configure
	cd dependencies/sources/glpk-$(GLPK_TAG) && ./configure --prefix=$(OR_ROOT_FULL)/dependencies/install --with-pic

dependencies/sources/glpk-$(GLPK_TAG)/configure: dependencies/archives/glpk-$(GLPK_TAG).tar.gz
	cd dependencies/sources && tar xvzmf ../archives/glpk-$(GLPK_TAG).tar.gz

# Install scip if needed.
install_scip: $(SCIP_TARGET)

dependencies/install/scipoptsuite-$(SCIP_TAG)/scip-$(SCIP_TAG)/bin/scip: dependencies/archives/scipoptsuite-$(SCIP_TAG).tgz
	cd dependencies/install && tar xvzmf ../archives/scipoptsuite-$(SCIP_TAG).tgz && cd scipoptsuite-$(SCIP_TAG) && $(BUILD_SCIP)

# Install mono if needed
install_mono: $(MONO_TARGET)

dependencies/install/bin/gmcs: dependencies/sources/mono-$(MONO_TAG)/Makefile
	cd dependencies/sources/mono-$(MONO_TAG) && make && make install

dependencies/sources/mono-$(MONO_TAG)/Makefile: dependencies/sources/mono-$(MONO_TAG)/configure
ifeq ($(PLATFORM),MACOSX)
	cd dependencies/sources/mono-$(MONO_TAG) && ./configure --prefix=$(OR_ROOT_FULL)/dependencies/install --with-glib=embedded --enable-nls=no --host=x86_64-apple-darwin10 --with-mcs-docs=no
else
	cd dependencies/sources/mono-$(MONO_TAG) && ./configure --prefix=$(OR_ROOT_FULL)/dependencies/install
endif

dependencies/sources/mono-$(MONO_TAG)/configure: dependencies/archives/mono-$(MONO_TAG).tar.bz2
	cd dependencies/sources && tar xvjmf ../archives/mono-$(MONO_TAG).tar.bz2


# Clean everything.
clean_third_party:
	-$(DEL) Makefile.local
	-$(DELREC) dependencies/install
	-$(DELREC) dependencies/sources/cbc*
	-$(DELREC) dependencies/sources/coin-cbc*
	-$(DELREC) dependencies/sources/gflags*
	-$(DELREC) dependencies/sources/glpk*
	-$(DELREC) dependencies/sources/google*
	-$(DELREC) dependencies/sources/mono*
	-$(DELREC) dependencies/sources/pcre*
	-$(DELREC) dependencies/sources/protobuf*
	-$(DELREC) dependencies/sources/sparsehash*
	-$(DELREC) dependencies/sources/swig*

# Create Makefile.local
makefile_third_party: Makefile.local

# Install python modules
install_python_modules:
	cd dependencies/sources/google_apputils_python-$(GOOGLE_APPUTILS_TAG) && python$(PYTHONVERSION) setup.py install --user

Makefile.local:
	@echo Generating Makefile.local
	@echo UNIX_PYTHON_VER = $(PYTHONVERSION) > Makefile.local
	@echo UNIX_GFLAGS_DIR = $(OR_ROOT_FULL)/dependencies/install >> Makefile.local
	@echo UNIX_PROTOBUF_DIR = $(OR_ROOT_FULL)/dependencies/install >> Makefile.local
	@echo UNIX_SPARSEHASH_DIR = $(OR_ROOT_FULL)/dependencies/install >> Makefile.local
	@echo UNIX_SWIG_BINARY = $(OR_ROOT_FULL)/dependencies/install/bin/swig >> Makefile.local
	@echo UNIX_CLP_DIR = $(OR_ROOT_FULL)/dependencies/install >> Makefile.local
	@echo UNIX_CBC_DIR = $(OR_ROOT_FULL)/dependencies/install >> Makefile.local
	@echo $(GLPK_MAKEFILE) >> Makefile.local
	@echo $(SCIP_MAKEFILE) >> Makefile.local
	@echo UNIX_SCIP_TAG = $(SCIP_TAG) >> Makefile.local
	@echo # Please define UNIX_SLM_DIR to use Sulum Optimization. >> Makefile.local
	@echo $(MONO_MAKEFILE) >> Makefile.local
	@echo $(SELECTED_JDK_DEF) >> Makefile.local
