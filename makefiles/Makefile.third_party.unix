# SVN tags of dependencies to checkout.
GFLAGS_TAG = 76 # version 2.0
PROTOBUF_TAG = 391 # version 2.4.1
GOOGLE_APPUTILS_TAG = 11 # trunk
SPARSEHASH_TAG = 116 # 2.0.2
CBC_TAG = 2.7.7
SWIG_TAG = rel-2.0.4
PCRE_TAG = 800 # version 8.21
MONO_TAG = 2.11.1

# Build extra dependencies (GLPK, SCIP) from archive only if the archive is present.
# The archive should be glpk-4.47.tar.gz
GLPK_TAG = 4.47
# The archive should be ziboptsuite-2.1.1.tgz
SCIP_TAG = 2.1.1

# Detect if scip archive is there.
ifeq ($(wildcard dependencies/archives/ziboptsuite-$(SCIP_TAG).tgz),)
    SCIP_TARGET =
    SCIP_MAKEFILE = # UNIX_SCIP_DIR support not included.
else
    SCIP_TARGET = dependencies/install/ziboptsuite-$(SCIP_TAG)/scip-$(SCIP_TAG)/bin/scip
    SCIP_MAKEFILE = UNIX_SCIP_DIR = $(OR_ROOT_FULL)/dependencies/install/ziboptsuite-$(SCIP_TAG)/scip-$(SCIP_TAG)
    ifeq ($(PLATFORM), LINUX)
	BUILD_SCIP = make ZIMPL=false READLINE=false USRCXXFLAGS=-fPIC CFLAGS=-fPIC
    endif
    ifeq ($(PLATFORM), MACOSX)
	BUILD_SCIP = make ZIMPL=false READLINE=false ARCH=x86_64
    endif
endif

# Detect if GLPK archive is there.
ifeq ($(wildcard dependencies/archives/glpk-$(GLPK_TAG).tar.gz),)
    GLPK_TARGET =
    GLPK_MAKEFILE = # GLPK support not included.
else
    GLPK_TARGET = dependencies/install/bin/glpsol
    GLPK_MAKEFILE = UNIX_GLPK_DIR = $(OR_ROOT_FULL)/dependencies/install
endif

# Detect if mono archive is there
ifeq ($(wildcard dependencies/archives/mono-$(MONO_TAG).tar.bz2),)
    MONO_TARGET =
    MONO_MAKEFILE = # MONO support not included.
else
    MONO_TARGET = dependencies/install/bin/gmcs
    MONO_MAKEFILE = UNIX_MONO_DIR = $(OR_ROOT_FULL)/dependencies/install
endif



# Main target.
.PHONY: third_party build_third_party makefile_third_party
third_party: build_third_party makefile_third_party

build_third_party: \
	install_gflags \
	install_protobuf \
	install_google_apputils \
	install_sparsehash \
	install_support \
	install_swig \
	install_coin_cbc \
	install_glpk \
	install_scip \
	install_mono

# Install gflags.
install_gflags: dependencies/install/bin/gflags_completions.sh

dependencies/install/bin/gflags_completions.sh: dependencies/sources/gflags/Makefile
	cd dependencies/sources/gflags && make install

dependencies/sources/gflags/Makefile: dependencies/sources/gflags/configure
	cd dependencies/sources/gflags && ./configure --prefix=$(OR_ROOT_FULL)/dependencies/install

dependencies/sources/gflags/configure: dependencies/sources/gflags/autogen.sh
	cd dependencies/sources/gflags && ./autogen.sh

dependencies/sources/gflags/autogen.sh:
	svn co http://gflags.googlecode.com/svn/trunk/ -r $(GFLAGS_TAG) dependencies/sources/gflags

# Install protocol buffers.
install_protobuf: dependencies/install/bin/protoc

dependencies/install/bin/protoc: dependencies/sources/protobuf/Makefile
	cd dependencies/sources/protobuf && make install

dependencies/sources/protobuf/Makefile: dependencies/sources/protobuf/configure
	cd dependencies/sources/protobuf && ./configure --prefix=$(OR_ROOT_FULL)/dependencies/install

dependencies/sources/protobuf/configure: dependencies/sources/protobuf/autogen.sh
	cd dependencies/sources/protobuf && ./autogen.sh

dependencies/sources/protobuf/autogen.sh:
	svn co http://protobuf.googlecode.com/svn/trunk/ -r $(PROTOBUF_TAG) dependencies/sources/protobuf

# Intall Google Apputils Python.
install_google_apputils: dependencies/sources/google-apputils/README

dependencies/sources/google-apputils/README:
	svn co http://google-apputils-python.googlecode.com/svn/trunk/ -r $(GOOGLE_APPUTILS_TAG) dependencies/sources/google-apputils

# Install sparsehash.
install_sparsehash: dependencies/install/include/google/dense_hash_map

dependencies/install/include/google/dense_hash_map: dependencies/sources/sparsehash/Makefile
	cd dependencies/sources/sparsehash && make install

dependencies/sources/sparsehash/Makefile: dependencies/sources/sparsehash/configure
	cd dependencies/sources/sparsehash && ./configure --prefix=$(OR_ROOT_FULL)/dependencies/install

dependencies/sources/sparsehash/configure: dependencies/sources/sparsehash/autogen.sh
	cd dependencies/sources/sparsehash && ./autogen.sh

dependencies/sources/sparsehash/autogen.sh:
	svn co http://sparsehash.googlecode.com/svn/trunk/ -r $(SPARSEHASH_TAG) dependencies/sources/sparsehash

# Install google code support.
install_support: dependencies/sources/googlecode-support/scripts/googlecode_upload.py

dependencies/sources/googlecode-support/scripts/googlecode_upload.py:
	svn checkout http://support.googlecode.com/svn/trunk/ dependencies/sources/googlecode-support


# Install Coin CBC.
install_coin_cbc: dependencies/install/bin/cbc

dependencies/install/bin/cbc: dependencies/sources/coin-cbc/Makefile
	cd dependencies/sources/coin-cbc && make install

dependencies/sources/coin-cbc/Makefile:
	svn co https://projects.coin-or.org/svn/Cbc/releases/$(CBC_TAG) dependencies/sources/coin-cbc
	cd dependencies/sources/coin-cbc && ./configure --prefix=$(OR_ROOT_FULL)/dependencies/install --disable-bzlib --without-lapack

# Install pcre (dependency of SWIG).
install_pcre: dependencies/install/bin/pcretest

dependencies/install/bin/pcretest: dependencies/sources/pcre/Makefile
	cd dependencies/sources/pcre && make install

dependencies/sources/pcre/Makefile: dependencies/sources/pcre/configure
	cd dependencies/sources/pcre && ./configure --disable-shared --prefix=$(OR_ROOT_FULL)/dependencies/install

dependencies/sources/pcre/configure: dependencies/sources/pcre/autogen.sh
	cd dependencies/sources/pcre && ./autogen.sh

dependencies/sources/pcre/autogen.sh:
	svn co svn://vcs.exim.org/pcre/code/trunk -r $(PCRE_TAG) dependencies/sources/pcre

# Install SWIG.
install_swig: dependencies/install/bin/swig

dependencies/install/bin/swig: dependencies/sources/swig/Makefile
	cd dependencies/sources/swig && make && make install

dependencies/sources/swig/Makefile: dependencies/sources/swig/configure dependencies/install/bin/pcretest
	cd dependencies/sources/swig && ./configure --prefix=$(OR_ROOT_FULL)/dependencies/install --with-pcre-prefix=$(OR_ROOT_FULL)/dependencies/install --disable-ccache

dependencies/sources/swig/configure: dependencies/sources/swig/autogen.sh
	cd dependencies/sources/swig && ./autogen.sh

dependencies/sources/swig/autogen.sh:
	svn co https://swig.svn.sourceforge.net/svnroot/swig/tags/$(SWIG_TAG) dependencies/sources/swig

# Install glpk if needed.
install_glpk: $(GLPK_TARGET)

dependencies/install/bin/glpsol: dependencies/sources/glpk-$(GLPK_TAG)/Makefile
	cd dependencies/sources/glpk-$(GLPK_TAG) && make install

dependencies/sources/glpk-$(GLPK_TAG)/Makefile: dependencies/sources/glpk-$(GLPK_TAG)/configure
	cd dependencies/sources/glpk-$(GLPK_TAG) && ./configure --prefix=$(OR_ROOT_FULL)/dependencies/install

dependencies/sources/glpk-$(GLPK_TAG)/configure: dependencies/archives/glpk-$(GLPK_TAG).tar.gz
	cd dependencies/sources && tar xvzmf ../archives/glpk-$(GLPK_TAG).tar.gz

# Install scip if needed.
install_scip: $(SCIP_TARGET)

dependencies/install/ziboptsuite-$(SCIP_TAG)/scip-$(SCIP_TAG)/bin/scip: dependencies/archives/ziboptsuite-$(SCIP_TAG).tgz
	cd dependencies/install && tar xvzmf ../archives/ziboptsuite-$(SCIP_TAG).tgz && cd ziboptsuite-$(SCIP_TAG) && $(BUILD_SCIP)

# Install mono if needed
install_mono: $(MONO_TARGET)

dependencies/install/bin/gmcs: dependencies/sources/mono-$(MONO_TAG)/Makefile
	cd dependencies/sources/mono-$(MONO_TAG) && make && make install

dependencies/sources/mono-$(MONO_TAG)/Makefile: dependencies/sources/mono-$(MONO_TAG)/configure
ifeq ($(PLATFORM),MACOSX)
	cd dependencies/sources/mono-$(MONO_TAG) && ./configure --prefix=$(OR_ROOT_FULL)/dependencies/install --with-glib=embedded --enable-nls=no --host=x86_64-apple-darwin10
else
	cd dependencies/sources/mono-$(MONO_TAG) && ./configure --prefix=$(OR_ROOT_FULL)/dependencies/install
endif

dependencies/sources/mono-$(MONO_TAG)/configure: dependencies/archives/mono-$(MONO_TAG).tar.bz2
	cd dependencies/sources && tar xvjmf ../archives/mono-$(MONO_TAG).tar.bz2


# Clean everything.
clean_third_party:
	$(DELREC) dependencies/install
	$(DELREC) dependencies/sources/*
	$(DEL) Makefile.local

# Create Makefile.local
makefile_third_party: Makefile.local

# Install python modules
install_python_modules:
	cd dependencies/sources/google-apputils && python$(PYTHONVERSION) setup.py install --user

Makefile.local:
	@echo Generating Makefile.local
	@echo UNIX_PYTHON_VER = $(PYTHONVERSION) > Makefile.local
	@echo UNIX_GFLAGS_DIR = $(OR_ROOT_FULL)/dependencies/install >> Makefile.local
	@echo UNIX_PROTOBUF_DIR = $(OR_ROOT_FULL)/dependencies/install >> Makefile.local
	@echo UNIX_SPARSEHASH_DIR = $(OR_ROOT_FULL)/dependencies/install >> Makefile.local
	@echo UNIX_SWIG_BINARY = $(OR_ROOT_FULL)/dependencies/install/bin/swig >> Makefile.local
	@echo UNIX_CLP_DIR = $(OR_ROOT_FULL)/dependencies/install >> Makefile.local
	@echo UNIX_CBC_DIR = $(OR_ROOT_FULL)/dependencies/install >> Makefile.local
	@echo $(GLPK_MAKEFILE) >> Makefile.local
	@echo $(SCIP_MAKEFILE) >> Makefile.local
	@echo # Please define UNIX_SLM_DIR to use Sulum Optimization. >> Makefile.local
	@echo $(MONO_MAKEFILE) >> Makefile.local
	@echo $(SELECTED_JDK_DEF) >> Makefile.local

