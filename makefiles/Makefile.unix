#  ----- You should not need to modify the following, unless the -----
#  ----- configuration is not standard. In that case, please tell us -----
#  ----- about it. -----

# This is needed to find python.h
PYTHON_INC = -I/usr/include/python$(UNIX_PYTHON_VER) -I/usr/lib/python$(UNIX_PYTHON_VER)
# This is needed to find gflags/gflags.h
GFLAGS_INC = -I$(UNIX_GFLAGS_DIR)/include
# This is needed to find protocol buffers.
PROTOBUF_INC = -I$(UNIX_PROTOBUF_DIR)/include
# This is needed to find sparse hash containers.
SPARSEHASH_INC = -I$(UNIX_SPARSEHASH_DIR)/include

# Define UNIX_CLP_DIR if unset and if UNIX_CBC_DIR is set.
ifdef UNIX_CBC_DIR
  ifndef UNIX_CLP_DIR
    UNIX_CLP_DIR = $(UNIX_CBC_DIR)
  endif
endif
# This is needed to find Coin LP include files.
ifdef UNIX_CLP_DIR
  CLP_INC = -I$(UNIX_CLP_DIR)/include -DUSE_CLP
  CLP_SWIG = $(CLP_INC)
endif
# This is needed to find Coin Branch and Cut include files.
ifdef UNIX_CBC_DIR
  CBC_INC = -I$(UNIX_CBC_DIR)/include -DUSE_CBC
  CBC_SWIG = $(CBC_INC)
endif
# This is needed to find GLPK include files.
ifdef UNIX_GLPK_DIR
  GLPK_INC = -I$(UNIX_GLPK_DIR)/include -DUSE_GLPK
  GLPK_SWIG = $(GLPK_INC)
endif
# This is needed to find scip include files.
ifdef UNIX_SCIP_DIR
  SCIP_INC = -I$(UNIX_SCIP_DIR)/src -DUSE_SCIP
  SCIP_SWIG = $(SCIP_INC)
endif

SWIG_INC = $(GLPK_SWIG) $(CLP_SWIG) $(CBC_SWIG) $(SCIP_SWIG)

# Compilation flags
DEBUG = -O3 -DNDEBUG
JNIDEBUG = -O1 -DNDEBUG
SYSCFLAGS = -fPIC
CCC = g++

# Check wether CBC/CLP need a coin subdir in library.
ifdef UNIX_CBC_DIR
  ifneq ($(wildcard $(UNIX_CBC_DIR)/lib/coin),)
    UNIX_CBC_COIN = /coin
  endif
endif
ifdef UNIX_CLP_DIR
  ifneq ($(wildcard $(UNIX_CLP_DIR)/lib/coin),)
    UNIX_CLP_COIN = /coin
  endif
endif

ifeq ($(PLATFORM),LINUX)
  LD = gcc -shared
  ifeq ($(PTRLENGTH),64)
    ARCH = -DARCH_K8
  else
    ARCH  =
  endif
  ifeq ($(UNIX_MONO_DIR),)
    CSC = mono-csc
    MONO = mono
  else
    CSC = $(UNIX_MONO_DIR)/bin/gmcs
    MONO = $(UNIX_MONO_DIR)/bin/mono
  endif

  # This is needed to find libgflags.a
  GFLAGS_LNK = -Wl,-rpath $(UNIX_GFLAGS_DIR)/lib -L$(UNIX_GFLAGS_DIR)/lib -lgflags
  # This is needed to find libz.a
  ZLIB_LNK = -lz
  # This is needed to find libprotobuf.a
  PROTOBUF_LNK = -Wl,-rpath $(UNIX_PROTOBUF_DIR)/lib -L$(UNIX_PROTOBUF_DIR)/lib -lprotobuf -lpthread
  ifdef UNIX_GLPK_DIR
    GLPK_LNK = -Wl,-rpath $(UNIX_GLPK_DIR)/lib -L$(UNIX_GLPK_DIR)/lib -lglpk
  endif
  ifdef UNIX_CLP_DIR
    CLP_LNK = -Wl,-rpath $(UNIX_CLP_DIR)/lib$(UNIX_CLP_COIN) -L$(UNIX_CLP_DIR)/lib$(UNIX_CLP_COIN) -lClp -lCoinUtils
  endif
  ifdef UNIX_CBC_DIR
    CBC_LNK = -Wl,-rpath $(UNIX_CBC_DIR)/lib$(UNIX_CBC_COIN) -L$(UNIX_CBC_DIR)/lib$(UNIX_CBC_COIN) -lCbcSolver -lCbc -lCgl -lOsi -lOsiCbc -lOsiClp
  endif
  ifdef UNIX_SCIP_DIR
    ifeq ($(PTRLENGTH),64)
      SCIP_ARCH = linux.x86_64.gnu.opt
    else
      SCIP_ARCH = linux.x86.gnu.opt
    endif
    SCIP_LNK =
    SCIP_STATIC_LNK = -L$(UNIX_SCIP_DIR)/lib -lscip.$(SCIP_ARCH) -lnlpi.$(SCIP_ARCH) -llpispx.$(SCIP_ARCH) -lsoplex.$(SCIP_ARCH)
  endif
  SYS_LNK = -lrt
  JAVA_INC = -I$(LINUX_JDK_ROOT)/include -I$(LINUX_JDK_ROOT)/include/linux
  JAVAC_BIN = $(LINUX_JDK_ROOT)/bin/javac
  JAVA_BIN = $(LINUX_JDK_ROOT)/bin/java
  JAR_BIN = $(LINUX_JDK_ROOT)/bin/jar
  JNILIBEXT = so
  LIBSUFFIX = so
  LINKCMD = g++ -shared
  LINKPREFIX = -o # Need the space.
  PRE_LIB = -Wl,-rpath $(TOP) -L$(TOP) -l
  POST_LIB =
endif  # LINUX
ifeq ($(PLATFORM),MACOSX)
  LD = ld -arch x86_64 -bundle -flat_namespace -undefined suppress -macosx_version_min 10.6 -lSystem -compatibility_version 1.0 -current_version $(OR_TOOLS_VERSION)
  JNILIBEXT = jnilib
  ifeq ($(UNIX_MONO_DIR),)
    CSC = gmcs
    MONO = mono
  else
    CSC = $(UNIX_MONO_DIR)/bin/gmcs
    MONO = $(UNIX_MONO_DIR)/bin/mono
  endif

  GFLAGS_LNK = -L$(UNIX_GFLAGS_DIR)/lib -lgflags
  ZLIB_LNK = -lz
  PROTOBUF_LNK = -L$(UNIX_PROTOBUF_DIR)/lib -lprotobuf
  ARCH = -DARCH_K8
  SYS_LNK =

  JAVA_INC = -I$(MAC_JDK_HEADERS)
  JAVAC_BIN = javac
  JAVA_BIN = java
  JAR_BIN = jar

  PRE_LIB = -L$(TOP) -l
  POST_LIB =
  LIBSUFFIX = dylib
  LINKCMD = ld -arch x86_64 -dylib -flat_namespace -undefined suppress -macosx_version_min 10.6 -lSystem -compatibility_version 1.0 -current_version $(OR_TOOLS_VERSION)
  LINKPREFIX = -o # Need the space.

  ifdef UNIX_GLPK_DIR
    GLPK_LNK = -L$(UNIX_GLPK_DIR)/lib -lglpk
  endif
  ifdef UNIX_CLP_DIR
    CLP_LNK = -L$(UNIX_CLP_DIR)/lib$(UNIX_CLP_COIN) -lClp -lCoinUtils
  endif
  ifdef UNIX_CBC_DIR
    CBC_LNK = -L$(UNIX_CBC_DIR)/lib$(UNIX_CBC_COIN) -lCbcSolver -lCbc -lCgl -lOsi -lOsiCbc -lOsiClp
  endif
  ifdef UNIX_SCIP_DIR
    SCIP_ARCH = darwin.x86_64.gnu.opt
    SCIP_STATIC_LNK = -force_load $(UNIX_SCIP_DIR)/lib/libscip.$(SCIP_ARCH).a $(UNIX_SCIP_DIR)/lib/libnlpi.$(SCIP_ARCH).a -force_load $(UNIX_SCIP_DIR)/lib/liblpispx.$(SCIP_ARCH).a -force_load $(UNIX_SCIP_DIR)/lib/libsoplex.$(SCIP_ARCH).a
    SCIP_LNK = -lreadline
  endif
endif  # MAC OS X

CFLAGS = $(SYSCFLAGS) $(DEBUG) -I. -Igen $(GFLAGS_INC) $(ARCH) \
        -Wno-deprecated $(PROTOBUF_INC) $(CBC_INC) $(CLP_INC) $(GLPK_INC) \
	$(SCIP_INC) $(SPARSEHASH_INC)
JNIFLAGS = $(SYSCFLAGS) $(JNIDEBUG) -I. -Igen $(GFLAGS_INC) $(ARCH) \
        -Wno-deprecated $(PROTOBUF_INC) $(CBC_INC) $(CLP_INC) $(GLPK_INC) $(SCIP_INC)
LDFLAGS = $(GFLAGS_LNK) $(ZLIB_LNK) $(PROTOBUF_LNK) $(SYS_LNK)
LDLPDEPS = $(GLPK_LNK) $(CBC_LNK) $(CLP_LNK) $(SCIP_LNK)

# Do we need to run a sed script to fix swig output?
ifeq ($(UNIX_SWIG_BINARY),swig)
  SWIG_VERSION = $(shell $(UNIX_SWIG_BINARY) -version | grep SWIG)
  SWIG_TEST = $(findstring 1.3.31,$(SWIG_VERSION))
  ifeq (,$(SWIG_TEST))
    FIX_SWIG = sed -i -e 's/Tlong/T_long/g' gen/com/google/ortools/constraintsolver/Solver.java
  endif
endif
ifneq ($(wildcard $(UNIX_SWIG_BINARY)),)
  SWIG_VERSION = $(shell $(UNIX_SWIG_BINARY) -version | grep SWIG)
  SWIG_TEST = $(findstring 1.3.31,$(SWIG_VERSION))
  ifeq (,$(SWIG_TEST))
    FIX_SWIG = sed -i -e 's/Tlong/T_long/g' gen/com/google/ortools/constraintsolver/Solver.java
  endif
endif

# Unix specific definitions
PROTOBUF_DIR = $(UNIX_PROTOBUF_DIR)
SWIG_BINARY = $(UNIX_SWIG_BINARY)
MKDIR=mkdir
COPY=cp
TOUCH=touch
LIBPREFIX = $(TOP)$Slib
O = o
E =
SHAREDLIBEXT = so
LDOUT = -o # need the space.
OBJOUT = -o # need the space.
EXEOUT = -o # need the space.
DEL = rm -f
DELREC = rm -rf
S = /
CPSEP = :
SED = sed

print_fix_swig:
	@echo UNIX_SWIG_BINARY = $(UNIX_SWIG_BINARY)
	@echo SWIG_VERSION = $(SWIG_VERSION)
	@echo SWIG_TEST = $(SWIG_TEST)
	@echo FIX_SWIG = $(FIX_SWIG)
